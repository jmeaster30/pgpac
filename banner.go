package main

import (
	"fmt"
	"math/rand"
	"time"
)

func DateEqual(date1 time.Time, date2 time.Time) bool {
	_, m1, d1 := date1.Date()
	_, m2, d2 := date2.Date()
	return m1 == m2 && d1 == d2
}

func PrintBanner() {
	fmt.Println()
	currentTime := time.Now()
	rand.Seed(time.Now().UnixNano())
	if DateEqual(currentTime, time.Date(0, 10, 31, 0, 0, 0, 0, time.Local)) {
		pick := rand.Intn(2)
		if pick == 0 {
			fmt.Println(" ██▓███    ▄████  ██▓███   ▄▄▄       ▄████▄  ")
			fmt.Println("▓██░  ██▒ ██▒ ▀█▒▓██░  ██▒▒████▄    ▒██▀ ▀█  ")
			fmt.Println("▓██░ ██▓▒▒██░▄▄▄░▓██░ ██▓▒▒██  ▀█▄  ▒▓█    ▄ ")
			fmt.Println("▒██▄█▓▒ ▒░▓█  ██▓▒██▄█▓▒ ▒░██▄▄▄▄██ ▒▓▓▄ ▄██▒")
			fmt.Println("▒██▒ ░  ░░▒▓███▀▒▒██▒ ░  ░ ▓█   ▓██▒▒ ▓███▀ ░")
			fmt.Println("▒▓▒░ ░  ░ ░▒   ▒ ▒▓▒░ ░  ░ ▒▒   ▓▒█░░ ░▒ ▒  ░")
			fmt.Println("░▒ ░       ░   ░ ░▒ ░       ▒   ▒▒ ░  ░  ▒   ")
			fmt.Println("░░       ░ ░   ░ ░░         ░   ▒   ░        ")
			fmt.Println("              ░                ░  ░░ ░       ")
			fmt.Println("                                   ░         ")
		} else {
			fmt.Println("   /`-.     )\\.-.      /`-.     /`-.      )\\.-.  ")
			fmt.Println(" ,' _  \\  ,' ,-,_)   ,' _  \\  ,' _  \\   ,' ,-,_) ")
			fmt.Println("(  '-' ( (  .   __  (  '-' ( (  '-' (  (  .   _  ")
			fmt.Println(" ) ,._.'  ) '._\\ _)  ) ,._.'  )   _  )  ) '..' ) ")
			fmt.Println("(  '     (  ,   (   (  '     (  ,' ) \\ (  ,   (  ")
			fmt.Println(" )/       )/'._.'    )/       )/    )/  )/'._.'  ")
		}
	} else {
		pick := rand.Intn(30)
		if pick == 0 {
			fmt.Println(" (             (                     ")
			fmt.Println(" )\\ )  (       )\\ )    (        (    ")
			fmt.Println("(()/(  )\\ )   (()/(    )\\       )\\   ")
			fmt.Println(" /(_))(()/(    /(_))((((_)(   (((_)  ")
			fmt.Println("(_))   /(_))_ (_))   )\\ _ )\\  )\\___  ")
			fmt.Println("| _ \\ (_)) __|| _ \\  (_)_\\(_)((/ __| ")
			fmt.Println("|  _/   | (_ ||  _/   / _ \\   | (__  ")
			fmt.Println("|_|      \\___||_|    /_/ \\_\\   \\___| ")
		} else if pick == 1 {
			fmt.Println("   #      # #        #      ##########     #      ")
			fmt.Println("  #######  #   #    #######       ###  ########## ")
			fmt.Println(" #     #  # # #    #     #       #     #        # ")
			fmt.Println("# #   #      #    # #   #       #             ##  ")
			fmt.Println("   ###      # #      ###       #            ##    ")
			fmt.Println("  ##       #   #    ##        #           ##      ")
			fmt.Println("##              # ##         #          ##        ")
		} else if pick == 2 {
			fmt.Println("      ______________________________________________________________________")
			fmt.Println("     _/\\/\\/\\/\\/\\______/\\/\\/\\/\\/\\__/\\/\\/\\/\\/\\________/\\/\\________/\\/\\/\\/\\/\\_ ")
			fmt.Println("    _/\\/\\____/\\/\\__/\\/\\__________/\\/\\____/\\/\\____/\\/\\/\\/\\____/\\/\\_________  ")
			fmt.Println("   _/\\/\\/\\/\\/\\____/\\/\\__/\\/\\/\\__/\\/\\/\\/\\/\\____/\\/\\____/\\/\\__/\\/\\_________   ")
			fmt.Println("  _/\\/\\__________/\\/\\____/\\/\\__/\\/\\__________/\\/\\/\\/\\/\\/\\__/\\/\\_________    ")
			fmt.Println(" _/\\/\\____________/\\/\\/\\/\\/\\__/\\/\\__________/\\/\\____/\\/\\____/\\/\\/\\/\\/\\_     ")
			fmt.Println("______________________________________________________________________      ")
		} else {
			fmt.Println("██████╗  ██████╗ ██████╗  █████╗  ██████╗")
			fmt.Println("██╔══██╗██╔════╝ ██╔══██╗██╔══██╗██╔════╝")
			fmt.Println("██████╔╝██║  ███╗██████╔╝███████║██║     ")
			fmt.Println("██╔═══╝ ██║   ██║██╔═══╝ ██╔══██║██║     ")
			fmt.Println("██║     ╚██████╔╝██║     ██║  ██║╚██████╗")
			fmt.Println("╚═╝      ╚═════╝ ╚═╝     ╚═╝  ╚═╝ ╚═════╝")
		}
	}
	fmt.Println()
	fmt.Println("╔════════════════════════════════════════════════════╗")
	fmt.Println("║ PGPAC - PostgreSQL Database Schema Management Tool ║")
	fmt.Println("╚════════════════════════════════════════════════════╝")
}
